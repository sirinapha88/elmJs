var _rtfeldman$elm_workshop$ElmHub$initialModel = {query: 'tutorial', results: _elm_lang$core$Dict$empty, errorMessage: _elm_lang$core$Maybe$Nothing};
var _rtfeldman$elm_workshop$ElmHub$Model = F3(
	function (a, b, c) {
		return {query: a, results: b, errorMessage: c};
	});
var _rtfeldman$elm_workshop$ElmHub$SearchResult = F3(
	function (a, b, c) {
		return {id: a, name: b, stars: c};
	});
var _rtfeldman$elm_workshop$ElmHub$searchResultDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'stargazers_count',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'full_name',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'id',
			_elm_lang$core$Json_Decode$int,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_rtfeldman$elm_workshop$ElmHub$SearchResult))));
var _rtfeldman$elm_workshop$ElmHub$responseDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['items']),
	_elm_lang$core$Json_Decode$list(_rtfeldman$elm_workshop$ElmHub$searchResultDecoder));
var _rtfeldman$elm_workshop$ElmHub$DoNothing = {ctor: 'DoNothing'};
var _rtfeldman$elm_workshop$ElmHub$HandleSearchError = function (a) {
	return {ctor: 'HandleSearchError', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$HandleSearchResponse = function (a) {
	return {ctor: 'HandleSearchResponse', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$searchFeed = function (query) {
	var url = A2(
		_elm_lang$core$Basics_ops['++'],
		'https://api.github.com/search/repositories?access_token=',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_rtfeldman$elm_workshop$Auth$token,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'&q=',
				A2(_elm_lang$core$Basics_ops['++'], query, '+language:elm&sort=stars&order=desc'))));
	return A3(
		_elm_lang$core$Task$perform,
		_rtfeldman$elm_workshop$ElmHub$HandleSearchError,
		_rtfeldman$elm_workshop$ElmHub$HandleSearchResponse,
		A2(_evancz$elm_http$Http$get, _rtfeldman$elm_workshop$ElmHub$responseDecoder, url));
};
var _rtfeldman$elm_workshop$ElmHub$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Search':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[
							_rtfeldman$elm_workshop$ElmHub$searchFeed(model.query)
						]));
			case 'SetQuery':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{query: _p0._0}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'HandleSearchError':
				var _p1 = _p0._0;
				if (_p1.ctor === 'UnexpectedPayload') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _elm_lang$core$Maybe$Just(_p1._0)
							}),
						_elm_lang$core$Native_List.fromArray(
							[]));
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _elm_lang$core$Maybe$Just('Error loading search results')
							}),
						_elm_lang$core$Native_List.fromArray(
							[]));
				}
			case 'HandleSearchResponse':
				var resultsById = _elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						function (searchResult) {
							return {ctor: '_Tuple2', _0: searchResult.id, _1: searchResult};
						},
						_p0._0));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{results: resultsById}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'DeleteById':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							results: A2(_elm_lang$core$Dict$remove, _p0._0, model.results)
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[]));
		}
	});
var _rtfeldman$elm_workshop$ElmHub$DeleteById = function (a) {
	return {ctor: 'DeleteById', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$viewSearchResult = function (result) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('star-count')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(result.stars))
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$href(
						A2(_elm_lang$core$Basics_ops['++'], 'https://github.com/', result.name)),
						_elm_lang$html$Html_Attributes$target('_blank')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(result.name)
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('hide-result'),
						_elm_lang$html$Html_Events$onClick(
						_rtfeldman$elm_workshop$ElmHub$DeleteById(result.id))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('X')
					]))
			]));
};
var _rtfeldman$elm_workshop$ElmHub$viewSearchResults = function (results) {
	return A2(
		_elm_lang$core$List$map,
		_rtfeldman$elm_workshop$ElmHub$viewSearchResult,
		A2(
			_elm_lang$core$List$sortBy,
			function (result) {
				return result.stars;
			},
			_elm_lang$core$Dict$values(results)));
};
var _rtfeldman$elm_workshop$ElmHub$SetQuery = function (a) {
	return {ctor: 'SetQuery', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$Search = {ctor: 'Search'};
var _rtfeldman$elm_workshop$ElmHub$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('content')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$header,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$h1,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('ElmHub')
							])),
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('tagline')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('“Like GitHub, but for Elm things.”')
							]))
					])),
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('search-query'),
						_elm_lang$html$Html_Events$onInput(_rtfeldman$elm_workshop$ElmHub$SetQuery),
						_elm_lang$html$Html_Attributes$defaultValue(model.query)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('search-button'),
						_elm_lang$html$Html_Events$onClick(_rtfeldman$elm_workshop$ElmHub$Search)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Search')
					])),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('results')
					]),
				_rtfeldman$elm_workshop$ElmHub$viewSearchResults(model.results))
			]));
};
