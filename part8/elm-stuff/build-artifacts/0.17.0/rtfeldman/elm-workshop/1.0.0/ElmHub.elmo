var _rtfeldman$elm_workshop$ElmHub$viewErrorMessage = function (errorMessage) {
	var _p0 = errorMessage;
	if (_p0.ctor === 'Just') {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('error')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(_p0._0)
				]));
	} else {
		return _elm_lang$html$Html$text('');
	}
};
var _rtfeldman$elm_workshop$ElmHub$initialModel = {
	query: 'tutorial',
	results: _elm_lang$core$Native_List.fromArray(
		[]),
	errorMessage: _elm_lang$core$Maybe$Nothing
};
var _rtfeldman$elm_workshop$ElmHub$getQueryString = function (query) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'access_token=',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_rtfeldman$elm_workshop$Auth$token,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'&q=',
				A2(_elm_lang$core$Basics_ops['++'], query, '+language:elm&sort=stars&order=desc'))));
};
var _rtfeldman$elm_workshop$ElmHub$update = F3(
	function (searchFeed, msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Search':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: searchFeed(
						_rtfeldman$elm_workshop$ElmHub$getQueryString(model.query))
				};
			case 'SetQuery':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{query: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HandleSearchResponse':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{results: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HandleSearchError':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{errorMessage: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteById':
				var newResults = A2(
					_elm_lang$core$List$filter,
					function (_p2) {
						var _p3 = _p2;
						return !_elm_lang$core$Native_Utils.eq(_p3.id, _p1._0);
					},
					model.results);
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{results: newResults});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _rtfeldman$elm_workshop$ElmHub$Model = F3(
	function (a, b, c) {
		return {query: a, results: b, errorMessage: c};
	});
var _rtfeldman$elm_workshop$ElmHub$SearchResult = F3(
	function (a, b, c) {
		return {id: a, name: b, stars: c};
	});
var _rtfeldman$elm_workshop$ElmHub$searchResultDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'stargazers_count',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'full_name',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'id',
			_elm_lang$core$Json_Decode$int,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_rtfeldman$elm_workshop$ElmHub$SearchResult))));
var _rtfeldman$elm_workshop$ElmHub$responseDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['items']),
	_elm_lang$core$Json_Decode$list(_rtfeldman$elm_workshop$ElmHub$searchResultDecoder));
var _rtfeldman$elm_workshop$ElmHub$DoNothing = {ctor: 'DoNothing'};
var _rtfeldman$elm_workshop$ElmHub$HandleSearchError = function (a) {
	return {ctor: 'HandleSearchError', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$HandleSearchResponse = function (a) {
	return {ctor: 'HandleSearchResponse', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$decodeGithubResponse = function (value) {
	var _p4 = A2(_elm_lang$core$Json_Decode$decodeValue, _rtfeldman$elm_workshop$ElmHub$responseDecoder, value);
	if (_p4.ctor === 'Ok') {
		return _rtfeldman$elm_workshop$ElmHub$HandleSearchResponse(_p4._0);
	} else {
		return _rtfeldman$elm_workshop$ElmHub$HandleSearchError(
			_elm_lang$core$Maybe$Just(_p4._0));
	}
};
var _rtfeldman$elm_workshop$ElmHub$DeleteById = function (a) {
	return {ctor: 'DeleteById', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$viewSearchResult = function (result) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('star-count')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(result.stars))
					])),
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$href(
						A2(_elm_lang$core$Basics_ops['++'], 'https://github.com/', result.name)),
						_elm_lang$html$Html_Attributes$target('_blank')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(result.name)
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('hide-result'),
						_elm_lang$html$Html_Events$onClick(
						_rtfeldman$elm_workshop$ElmHub$DeleteById(result.id))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('X')
					]))
			]));
};
var _rtfeldman$elm_workshop$ElmHub$SetQuery = function (a) {
	return {ctor: 'SetQuery', _0: a};
};
var _rtfeldman$elm_workshop$ElmHub$Search = {ctor: 'Search'};
var _rtfeldman$elm_workshop$ElmHub$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('content')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$header,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$h1,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('ElmHub')
							])),
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('tagline')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('“Like GitHub, but for Elm things.”')
							]))
					])),
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('search-query'),
						_elm_lang$html$Html_Events$onInput(_rtfeldman$elm_workshop$ElmHub$SetQuery),
						_elm_lang$html$Html_Attributes$defaultValue(model.query)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('search-button'),
						_elm_lang$html$Html_Events$onClick(_rtfeldman$elm_workshop$ElmHub$Search)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Search')
					])),
				_rtfeldman$elm_workshop$ElmHub$viewErrorMessage(model.errorMessage),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('results')
					]),
				A2(_elm_lang$core$List$map, _rtfeldman$elm_workshop$ElmHub$viewSearchResult, model.results))
			]));
};
