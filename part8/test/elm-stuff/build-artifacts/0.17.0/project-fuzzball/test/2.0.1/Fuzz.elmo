var _project_fuzzball$test$Fuzz$toGeneratorFrequency = function (_p0) {
	var _p1 = _p0;
	return {ctor: '_Tuple2', _0: _p1._0, _1: _p1._1.generator};
};
var _project_fuzzball$test$Fuzz$okOrCrash = function (result) {
	var _p2 = result;
	if (_p2.ctor === 'Ok') {
		return _p2._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Fuzz',
			{
				start: {line: 387, column: 5},
				end: {line: 392, column: 28}
			},
			_p2)(_p2._0);
	}
};
var _project_fuzzball$test$Fuzz$Fuzzer = F2(
	function (a, b) {
		return {generator: a, shrinker: b};
	});
var _project_fuzzball$test$Fuzz$unit = A2(
	_project_fuzzball$test$Fuzz$Fuzzer,
	_mgold$elm_random_pcg$Random_Pcg$constant(
		{ctor: '_Tuple0'}),
	_elm_community$shrink$Shrink$noShrink);
var _project_fuzzball$test$Fuzz$bool = A2(_project_fuzzball$test$Fuzz$Fuzzer, _mgold$elm_random_pcg$Random_Pcg$bool, _elm_community$shrink$Shrink$bool);
var _project_fuzzball$test$Fuzz$order = function () {
	var intToOrder = function (i) {
		return _elm_lang$core$Native_Utils.eq(i, 0) ? _elm_lang$core$Basics$LT : (_elm_lang$core$Native_Utils.eq(i, 1) ? _elm_lang$core$Basics$EQ : _elm_lang$core$Basics$GT);
	};
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			intToOrder,
			A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, 2)),
		_elm_community$shrink$Shrink$order);
}();
var _project_fuzzball$test$Fuzz$int = function () {
	var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 3,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$int, -50, 50)
			},
				{
				ctor: '_Tuple2',
				_0: 0.2,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(0)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, _mgold$elm_random_pcg$Random_Pcg$maxInt - _mgold$elm_random_pcg$Random_Pcg$minInt)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$int, _mgold$elm_random_pcg$Random_Pcg$minInt - _mgold$elm_random_pcg$Random_Pcg$maxInt, 0)
			}
			]));
	return A2(_project_fuzzball$test$Fuzz$Fuzzer, generator, _elm_community$shrink$Shrink$int);
}();
var _project_fuzzball$test$Fuzz$intRange = F2(
	function (min, max) {
		return A2(
			_project_fuzzball$test$Fuzz$Fuzzer,
			A2(_mgold$elm_random_pcg$Random_Pcg$int, min, max),
			A2(
				_elm_community$shrink$Shrink$keepIf,
				function (i) {
					return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) && (_elm_lang$core$Native_Utils.cmp(i, max) < 1);
				},
				_elm_community$shrink$Shrink$int));
	});
var _project_fuzzball$test$Fuzz$float = function () {
	var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 3,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$float, -50, 50)
			},
				{
				ctor: '_Tuple2',
				_0: 0.5,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(0)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$float, -1, 1)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(
					_mgold$elm_random_pcg$Random_Pcg$float,
					0,
					_elm_lang$core$Basics$toFloat(_mgold$elm_random_pcg$Random_Pcg$maxInt - _mgold$elm_random_pcg$Random_Pcg$minInt))
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(
					_mgold$elm_random_pcg$Random_Pcg$float,
					_elm_lang$core$Basics$toFloat(_mgold$elm_random_pcg$Random_Pcg$minInt - _mgold$elm_random_pcg$Random_Pcg$maxInt),
					0)
			}
			]));
	return A2(_project_fuzzball$test$Fuzz$Fuzzer, generator, _elm_community$shrink$Shrink$float);
}();
var _project_fuzzball$test$Fuzz$floatRange = F2(
	function (min, max) {
		return A2(
			_project_fuzzball$test$Fuzz$Fuzzer,
			A2(_mgold$elm_random_pcg$Random_Pcg$float, min, max),
			A2(
				_elm_community$shrink$Shrink$keepIf,
				function (i) {
					return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) && (_elm_lang$core$Native_Utils.cmp(i, max) < 1);
				},
				_elm_community$shrink$Shrink$float));
	});
var _project_fuzzball$test$Fuzz$percentage = function () {
	var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 8,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$float, 0, 1)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(0)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(1)
			}
			]));
	return A2(_project_fuzzball$test$Fuzz$Fuzzer, generator, _elm_community$shrink$Shrink$float);
}();
var _project_fuzzball$test$Fuzz$char = A2(
	_project_fuzzball$test$Fuzz$Fuzzer,
	A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_elm_lang$core$Char$fromCode,
		A2(_mgold$elm_random_pcg$Random_Pcg$int, 32, 126)),
	_elm_community$shrink$Shrink$character);
var _project_fuzzball$test$Fuzz$string = A2(
	_project_fuzzball$test$Fuzz$Fuzzer,
	A3(_project_fuzzball$test$Util$rangeLengthString, 0, 10, _project_fuzzball$test$Fuzz$char.generator),
	_elm_community$shrink$Shrink$string);
var _project_fuzzball$test$Fuzz$maybe = function (fuzz) {
	var genBool = A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_elm_lang$core$Basics$not,
		_mgold$elm_random_pcg$Random_Pcg$oneIn(4));
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		A2(_mgold$elm_random_pcg$Random_Pcg$maybe, genBool, fuzz.generator),
		_elm_community$shrink$Shrink$maybe(fuzz.shrinker));
};
var _project_fuzzball$test$Fuzz$result = F2(
	function (errFuzz, valFuzz) {
		return A2(
			_project_fuzzball$test$Fuzz$Fuzzer,
			A2(
				_mgold$elm_random_pcg$Random_Pcg$andThen,
				_mgold$elm_random_pcg$Random_Pcg$bool,
				function (b) {
					return b ? A2(_mgold$elm_random_pcg$Random_Pcg$map, _elm_lang$core$Result$Err, errFuzz.generator) : A2(_mgold$elm_random_pcg$Random_Pcg$map, _elm_lang$core$Result$Ok, valFuzz.generator);
				}),
			A2(_elm_community$shrink$Shrink$result, errFuzz.shrinker, valFuzz.shrinker));
	});
var _project_fuzzball$test$Fuzz$list = function (fuzz) {
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		_mgold$elm_random_pcg$Random_Pcg$frequency(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: _mgold$elm_random_pcg$Random_Pcg$constant(
						_elm_lang$core$Native_List.fromArray(
							[]))
				},
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: A2(
						_mgold$elm_random_pcg$Random_Pcg$map,
						function (x) {
							return _elm_lang$core$Native_List.fromArray(
								[x]);
						},
						fuzz.generator)
				},
					{
					ctor: '_Tuple2',
					_0: 3,
					_1: A3(_project_fuzzball$test$Util$rangeLengthList, 2, 10, fuzz.generator)
				},
					{
					ctor: '_Tuple2',
					_0: 2,
					_1: A3(_project_fuzzball$test$Util$rangeLengthList, 10, 100, fuzz.generator)
				},
					{
					ctor: '_Tuple2',
					_0: 0.5,
					_1: A3(_project_fuzzball$test$Util$rangeLengthList, 100, 400, fuzz.generator)
				}
				])),
		_elm_community$shrink$Shrink$list(fuzz.shrinker));
};
var _project_fuzzball$test$Fuzz$array = function (fuzz) {
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		_mgold$elm_random_pcg$Random_Pcg$frequency(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: _mgold$elm_random_pcg$Random_Pcg$constant(_elm_lang$core$Array$empty)
				},
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: A2(
						_mgold$elm_random_pcg$Random_Pcg$map,
						_elm_lang$core$Array$repeat(1),
						fuzz.generator)
				},
					{
					ctor: '_Tuple2',
					_0: 3,
					_1: A3(_project_fuzzball$test$Util$rangeLengthArray, 2, 10, fuzz.generator)
				},
					{
					ctor: '_Tuple2',
					_0: 2,
					_1: A3(_project_fuzzball$test$Util$rangeLengthArray, 10, 100, fuzz.generator)
				},
					{
					ctor: '_Tuple2',
					_0: 0.5,
					_1: A3(_project_fuzzball$test$Util$rangeLengthArray, 100, 400, fuzz.generator)
				}
				])),
		_elm_community$shrink$Shrink$array(fuzz.shrinker));
};
var _project_fuzzball$test$Fuzz$tuple = function (_p4) {
	var _p5 = _p4;
	var _p7 = _p5._1;
	var _p6 = _p5._0;
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_p6.generator,
			_p7.generator),
		_elm_community$shrink$Shrink$tuple(
			{ctor: '_Tuple2', _0: _p6.shrinker, _1: _p7.shrinker}));
};
var _project_fuzzball$test$Fuzz$tuple3 = function (_p8) {
	var _p9 = _p8;
	var _p12 = _p9._2;
	var _p11 = _p9._1;
	var _p10 = _p9._0;
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		A4(
			_mgold$elm_random_pcg$Random_Pcg$map3,
			F3(
				function (v0, v1, v2) {
					return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
				}),
			_p10.generator,
			_p11.generator,
			_p12.generator),
		_elm_community$shrink$Shrink$tuple3(
			{ctor: '_Tuple3', _0: _p10.shrinker, _1: _p11.shrinker, _2: _p12.shrinker}));
};
var _project_fuzzball$test$Fuzz$tuple4 = function (_p13) {
	var _p14 = _p13;
	var _p18 = _p14._3;
	var _p17 = _p14._2;
	var _p16 = _p14._1;
	var _p15 = _p14._0;
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		A5(
			_mgold$elm_random_pcg$Random_Pcg$map4,
			F4(
				function (v0, v1, v2, v3) {
					return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
				}),
			_p15.generator,
			_p16.generator,
			_p17.generator,
			_p18.generator),
		_elm_community$shrink$Shrink$tuple4(
			{ctor: '_Tuple4', _0: _p15.shrinker, _1: _p16.shrinker, _2: _p17.shrinker, _3: _p18.shrinker}));
};
var _project_fuzzball$test$Fuzz$tuple5 = function (_p19) {
	var _p20 = _p19;
	var _p25 = _p20._4;
	var _p24 = _p20._3;
	var _p23 = _p20._2;
	var _p22 = _p20._1;
	var _p21 = _p20._0;
	return A2(
		_project_fuzzball$test$Fuzz$Fuzzer,
		A6(
			_mgold$elm_random_pcg$Random_Pcg$map5,
			F5(
				function (v0, v1, v2, v3, v4) {
					return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
				}),
			_p21.generator,
			_p22.generator,
			_p23.generator,
			_p24.generator,
			_p25.generator),
		_elm_community$shrink$Shrink$tuple5(
			{ctor: '_Tuple5', _0: _p21.shrinker, _1: _p22.shrinker, _2: _p23.shrinker, _3: _p24.shrinker, _4: _p25.shrinker}));
};
var _project_fuzzball$test$Fuzz$filter = F2(
	function (predicate, fuzz) {
		return A2(
			_project_fuzzball$test$Fuzz$Fuzzer,
			A2(_mgold$elm_random_pcg$Random_Pcg$filter, predicate, fuzz.generator),
			A2(_elm_community$shrink$Shrink$keepIf, predicate, fuzz.shrinker));
	});
var _project_fuzzball$test$Fuzz$convert = F3(
	function (f, g, fuzz) {
		return A2(
			_project_fuzzball$test$Fuzz$Fuzzer,
			A2(_mgold$elm_random_pcg$Random_Pcg$map, f, fuzz.generator),
			A3(_elm_community$shrink$Shrink$convert, f, g, fuzz.shrinker));
	});
var _project_fuzzball$test$Fuzz$map = F2(
	function (f, fuzz) {
		return A2(
			_project_fuzzball$test$Fuzz$Fuzzer,
			A2(_mgold$elm_random_pcg$Random_Pcg$map, f, fuzz.generator),
			_elm_community$shrink$Shrink$noShrink);
	});
var _project_fuzzball$test$Fuzz$frequency = function (list) {
	var _p26 = _elm_lang$core$List$head(list);
	if (_p26.ctor === 'Nothing') {
		return _elm_lang$core$Result$Err('You must provide at least one frequency pair.');
	} else {
		if (A2(
			_elm_lang$core$List$any,
			function (_p27) {
				var _p28 = _p27;
				return _elm_lang$core$Native_Utils.cmp(_p28._0, 0) < 0;
			},
			list)) {
			return _elm_lang$core$Result$Err('No frequency weights can be less than 0.');
		} else {
			if (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$sum(
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$fst, list)),
				0) < 1) {
				return _elm_lang$core$Result$Err('Frequency weights must sum to more than 0.');
			} else {
				var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
					A2(_elm_lang$core$List$map, _project_fuzzball$test$Fuzz$toGeneratorFrequency, list));
				return _elm_lang$core$Result$Ok(
					A2(_project_fuzzball$test$Fuzz$Fuzzer, generator, _p26._0._1.shrinker));
			}
		}
	}
};
var _project_fuzzball$test$Fuzz$frequencyOrCrash = function (_p29) {
	return _project_fuzzball$test$Fuzz$okOrCrash(
		_project_fuzzball$test$Fuzz$frequency(_p29));
};
