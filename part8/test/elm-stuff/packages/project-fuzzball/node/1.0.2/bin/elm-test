#!/usr/bin/env node

var processTitle = "elm-test"

process.title = processTitle;

var compile    = require("node-elm-compiler").compile,
  fs           = require("fs-extra"),
  chalk        = require("chalk"),
  path         = require("path"),
  temp         = require("temp").track(), // Automatically cleans up temp files.
  util         = require("util"),
  _            = require("lodash"),
  spawn        = require("cross-spawn");

var elm = {
  'elm-package': 'elm-package'
};

if (process.argv[2] == "--help" || process.argv[2] == "-h") {
  console.log("Usage: elm-test init [--yes]  # Create example tests\n");
  console.log("Usage: elm-test TESTFILE [--compiler /path/to/compiler] # Run TESTFILE\n");
  console.log("Usage: elm-test [--compiler /path/to/compiler] # Run tests/TestRunner.elm\n");
  process.exit(1);
}

if (process.argv[2] == "--version") {
  console.log(require(path.join(__dirname, "..", "package.json")).version);
  process.exit(0);
}

if (process.argv[2] == "init") {
  var copyTemplate = function(templateName, destName) {
    if (arguments.length == 1) {
      destName = templateName;
    }
    var source = path.resolve(__dirname, "../templates/" + templateName);
    var destination = path.resolve("tests", destName);
    if (fs.existsSync(destination)) {
      console.log(destination + " already exists");
    } else {
      fs.copySync(source, destination);
      console.log("Created " + destination);
    }
  };

  var ensureDirectory = function(dirName) {
    var destination = path.resolve(".", dirName);
    if (fs.existsSync(destination)) {
      console.log(destination + " already exists");
    } else {
      fs.mkdirSync(destination);
      console.log("Created " + destination);
    }
  };

  var elmOptions = "";
  if (process.argv[3] == "--yes" || process.argv[3] == "-y") {
    elmOptions += " --yes";
  }

  ensureDirectory("src");
  ensureDirectory("tests");
  copyTemplate("elm-package.json");
  copyTemplate("TestRunner.elm");
  copyTemplate("Tests.elm");
  copyTemplate("gitignore", ".gitignore");
  process.exit(0);
}

function evalElmCode (compiledCode) {
  var Elm = function(module) { eval(compiledCode); return module.exports; }({});

  // Make sure necessary things are defined.
  if (typeof Elm === 'undefined') { throw 'elm-io config error: Elm is not defined. Make sure you provide a file compiled by Elm!'}
  if (typeof Elm.Main === 'undefined' ) { throw 'Elm.Main is not defined. Make sure your module is named Main.' };

  // Apply Node polyfills as necessary.
  var window = {Date: Date, addEventListener: function() {}, removeEventListener: function() {}};
  var document = {body: {}, createTextNode: function() {}};
  if (typeof XMLHttpRequest === 'undefined') { XMLHttpRequest = function() { return { addEventListener: function() {}, open: function() {}, send: function() {} }; }; }
  if (typeof FormData === 'undefined') { FormData = function () { this._data = []; }; FormData.prototype.append = function () { this._data.push(Array.prototype.slice.call(arguments)); }; }

  // Fix Windows Unicode problems. Credit to https://github.com/sindresorhus/figures for the Windows compat idea!
  var windowsSubstitutions = [[/[↓✗►]/g, '>'], [/╵│╷/g, '|'], [/✔/g, '√']];

  function windowsify(str) {
    return windowsSubstitutions.reduce(
      function(result, sub) { return result.replace(sub[0], sub[1]); }, str);
  }

  function chalkify(messages) {
    return messages.map(function(msg) {
      var path = msg.styles;
      var text = process.platform === 'win32' ? windowsify(msg.text) : msg.text;

      if (path.length === 0) {
        return text;
      } else {
        var fn = chalk;

        path.forEach(function(nextPath) { fn = fn[nextPath]; });

        return fn(text);
      }
    }).join('');
  }

  // Run the Elm app.
  var app = Elm.Main.worker();

  // Receive messages from ports and translate them into appropriate JS calls.
  app.ports.emit.subscribe(function(msg) {
    var msgType = msg[0];
    var data = msg[1];

    if (msgType === 'FINISHED') {
      console.log(chalkify(data.message));
      process.exit(data.exitCode);
    } else if (msgType === 'CHALK') {
      console.log(chalkify(data));
    }
  });
}

var testFile = process.argv[2],
    cwd = __dirname,
    pathToMake = undefined;

function spawnCompiler(cmd, args, opts) {
  var compilerOpts = _.defaults({stdio: "inherit"}, opts);

  return spawn(cmd, args, compilerOpts);
}

if (typeof testFile == "undefined") {
  testFile = "tests/TestRunner.elm";
}

if (!fs.existsSync(testFile)) {
  console.error("Could not find file " + testFile);
  process.exit(1);
}

if (testFile.slice(0, 6) == "tests/") {
  process.chdir("./tests");
  testFile = testFile.slice(6);
}

if (process.argv[3] == "--compiler" || process.argv[3] == "-c") {
  pathToMake = process.argv[4];

  if (!pathToMake) {
    console.error("The --compiler option must be given a path to an elm-make executable.");
    process.exit(1);
  }
}

temp.open({ prefix:'elm_test_', suffix:'.js' }, function(err, info) {
  var dest = info.path;
  var compileProcess = compile( [testFile],
    {output: dest, spawn: spawnCompiler, pathToMake: pathToMake});

  compileProcess.on('close', function(exitCode) {
    if (exitCode !== 0) {
      console.error("Compilation failed for", testFile);
      process.exit(exitCode);
    }

    evalElmCode(fs.readFileSync(dest, {encoding: "utf8"}));
  });
});
